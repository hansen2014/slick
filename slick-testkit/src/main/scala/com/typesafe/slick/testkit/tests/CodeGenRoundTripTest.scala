package com.typesafe.slick.testkit.tests

import org.junit.Assert._
import scala.slick.meta._
import scala.slick.ast.ColumnOption
import scala.slick.jdbc.meta.MTable
import scala.slick.jdbc.meta
import com.typesafe.slick.testkit.util.{JdbcTestDB, TestkitTest}
import scala.slick.test.meta.codegen.roundtrip.Tables

/** Tests code generated by CodeGeneratorTest */
class CodeGenRoundTripTest extends TestkitTest[JdbcTestDB] {
  import tdb.profile.simple._
  def test {
    object Tables extends{
      val profile = tdb.profile
    } with Tables
    import Tables.profile.simple._
    import Tables._
    val ddl = Posts.ddl ++ Categories.ddl ++ TypeTest.ddl
    //println(ddl.createStatements.mkString("\n"))
    try{
      ddl.create
    } catch {
      case e:java.sql.SQLSyntaxErrorException => println(ddl.createStatements.mkString("\n")); throw e
    }
    Categories.insert( CategoriesRow(1,"cat") )
    Posts.insertAll(
      PostsRow(1,"post 1",Some(1)),
      PostsRow(2,"post 2",Some(1)),
      PostsRow(3,"post 3",Some(1))
    )
    Categories.insert( CategoriesRow(2,"cat") )
    val res = ( Posts.length.run, Posts.filter(_.title =!= "post 1").map(_.title).run.toList )
    assertEquals((3,List("post 2","post 3")), res)

    // Testing table larger 22 columns
    import scala.slick.collection.heterogenous._
    import scala.slick.collection.heterogenous.syntax._
    val ts = Tables.Large
    val oData = 0 :: 11 :: 12 :: 13 :: 14 :: 15 :: 16 :: 21 :: 22 :: 23 :: 24 :: 25 :: 26 :: 31 :: 32 :: 33 :: 34 :: 35 :: 36 :: 41 :: 42 :: 43 :: 44 :: 45 :: 46 :: HNil
    ts.ddl.create
    ts.insert(oData)
    assertEquals((oData,0), ts.map(r => (r,r.id)).first)
  }
}
